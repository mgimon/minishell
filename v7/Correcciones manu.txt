+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

- heredocs - la interrupcion ctrl+\ deja caracteres en la linea

- utils 8 norminetear expandvar

- error syntax para cat <<EOF
mini> cat <<EOF
Token: cat, Type: CMD
Token: <<, Type: INPUT
Token: EOF, Type: FIL
Total tokens: 6
Error: Redirection op. '<' in invalid position.


+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


- echo -nn hola
- utils_17, al menos, y el main, contienen muchas funciones del sistema, fors, etc

norminette utils_1.c utils_2.c utils_3.c utils_4.c utils_5.c utils_6.c utils_7.c utils_8.c utils_9.c utils_10.c utils_11.c utils_12.c utils_13.c utils_14.c utils_15.c utils_16.c utils_17.c utils_18.c utils_19.c utils_20.c utils_21.c utils_22.c utils_23.c utils_24.c utils_25.c utils_26.c utils_executor.c sections.c prints.c builtins_1.c builtins_2.c executor.c frees.c frees_2.c

valgrind --leak-check=full --track-origins=yes ./minishell

stress test y test con la hoja de correcciones

subdivide esta funcion en funciones, de forma que el comportamiento del programa se mantenga EXACTAMENTE igual y ninguna funcion supere las 25 lineas ni haya mas de 5 declaraciones por funcion. intenta no hacer demasiadas nuevas funciones. el comportamiento del codigo resultante no debe variar en absoluto del original. ademas, debes respetar al maximo el estilo y estructura del codigo, haciendo la menor cantidad de cambios posibles. las declaraciones de variables y sus inicializaciones deben hacerse en lineas separadas. pero, por sobre todo, el funcionamiento del codigo debe ser exactamente el mismo. cuando digo EXACTAMENTE EL MISMO quiero decir EXACTAMENTE EL MISMO.
